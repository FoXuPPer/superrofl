import os
import aiohttp
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

INTROS = [
    "‚òùÔ∏è –Ø —É–≤–µ—Ä–µ–Ω",
    "üî≠ –ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç",
    "ü§î –Ø –¥—É–º–∞—é",
    "üîÆ –Ø—Å–Ω–æ –≤–∏–∂—É"
]

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")  
DEFAULT_MODEL = "meta-llama/llama-3.1-8b-instruct:free" 

MODELS = {
    "meta-llama/llama-3.1-8b-instruct:free": "LLaMA 3.1 8B (Free)",
    "google/gemma-2-9b-it:free": "Gemma 2 9B (Free)", 
    "qwen/qwen-2-72b-instruct:free": "Qwen 2 72B (Free)"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —É–º–Ω—ã–π –±–æ—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π @treshdurov. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ @" + BOT_USERNAME[1:] + ", –ª–∏–±–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

async def model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=model_id)]
        for model_id, name in MODELS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:", reply_markup=reply_markup)
    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    model_id = query.data
    if model_id in MODELS:
        context.user_data["model"] = model_id  
        await query.message.chat.send_message(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {MODELS[model_id]}")
        await query.message.delete()
    else:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.message.delete()

async def query_openrouter(message: str, model: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ç–µ–º–µ."},
            {"role": "user", "content": message}
        ]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                logger.info(f"OpenRouter API response status: {response.status}")
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"OpenRouter API response: {result}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'choices'
                    if "choices" in result and result["choices"]:
                        return result["choices"][0]["message"]["content"]
                    else:
                        logger.error(f"OpenRouter API response missing 'choices': {result}")
                        return "–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /model."
                else:
                    error_text = await response.text()
                    logger.error(f"OpenRouter API error: {response.status} - {error_text}")
                    if response.status == 429:
                        return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /model."
                    elif response.status == 401:
                        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
                    else:
                        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {response.status} - {error_text}"
    except Exception as e:
        logger.error(f"Exception in query_openrouter: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    text = message.text

    if message.chat.type in ["group", "supergroup"]:
        sender = message.from_user
        if not sender.is_bot: 
            if "group_members" not in context.chat_data:
                context.chat_data["group_members"] = {}
            context.chat_data["group_members"][sender.id] = sender

        if message.reply_to_message and message.reply_to_message.from_user.username == BOT_USERNAME[1:]:
            pass 
        else:
            if not text.startswith(BOT_USERNAME):
                return 
            text = text[len(BOT_USERNAME):].strip() 

    if not text:
        await message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!")
        return

    model = context.user_data.get("model", DEFAULT_MODEL)
    thinking_message = await message.reply_text("–î—É–º–∞—é...")
    response = await query_openrouter(text, model)

    try:
        await thinking_message.delete()
    except Exception as e:
        logger.error(f"Failed to delete thinking message: {str(e)}")
    await message.reply_text(response)
    
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ !–∫—Ç–æ –ø–æ–ª—É—á–µ–Ω–∞: {message.text}")

    if message.chat.type not in ["group", "supergroup"]:
        await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
        
    text = message.text
    if len(text) <= 4: 
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    question = text[4:].strip() 
    
    try:
        chat_members_count = await context.bot.get_chat_member_count(message.chat.id)
        if chat_members_count <= 1:
            await message.reply_text("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return
        
        if "group_members" not in context.chat_data:
            context.chat_data["group_members"] = {}
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π group_members")

        sender = message.from_user
        if not sender.is_bot:
            context.chat_data["group_members"][sender.id] = sender
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ –≤ group_members: {sender.id}")

        all_members = [user for user in context.chat_data["group_members"].values() if not user.is_bot]
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: {len(all_members)}")
        
        if not all_members:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –Ω–∞–ø–∏—à–µ—Ç –≤ —á–∞—Ç.")
            return
        
        random_member = random.choice(all_members)
        
        user_id = str(random_member.id)
        if "nicknames" in context.chat_data and user_id in context.chat_data["nicknames"]:
            display_name = context.chat_data["nicknames"][user_id]
        else:
            display_name = random_member.username if random_member.username else random_member.first_name
        
        mention = f"[{display_name}](tg://user?id={random_member.id})"
        
        intro = random.choice(INTROS)
        response = f"{intro}, —á—Ç–æ {mention} {question}"
        
        await message.reply_text(response, parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !–∫—Ç–æ: {str(e)}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")

async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    
    if message.chat.type not in ["group", "supergroup"]:
        await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    text = message.text
    if len(text) <= 4: 
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    nickname = text[4:].strip() 
    
    if not nickname:
        await message.reply_text("–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    if "nicknames" not in context.chat_data:
        context.chat_data["nicknames"] = {}
    
    user = message.from_user
    user_id = str(user.id)
    real_name = user.username if user.username else user.first_name
    mention = f"[{real_name}](tg://user?id={user_id})"
    
    if user_id in context.chat_data["nicknames"]:
        old_nickname = context.chat_data["nicknames"][user_id]
        context.chat_data["nicknames"][user_id] = nickname
        response = f"‚úÖ –ù–∏–∫ {mention} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{nickname}¬ª"
    else:
        context.chat_data["nicknames"][user_id] = nickname
        response = f"üóì –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention} : ¬´{nickname}¬ª"
    
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫ –¥–ª—è {user_id}: {nickname}")
    
    await message.reply_text(response, parse_mode="Markdown")

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("model", model))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.Regex(r'^!–∫—Ç–æ\b'), who))
    app.add_handler(MessageHandler(filters.Regex(r'^!–Ω–∏–∫\b'), set_nickname))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
