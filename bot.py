import os
import aiohttp
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

INTROS = [
    "‚òùÔ∏è –Ø —É–≤–µ—Ä–µ–Ω",
    "üî≠ –ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç",
    "ü§î –Ø –¥—É–º–∞—é",
    "üîÆ –Ø—Å–Ω–æ –≤–∏–∂—É"
]

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")  
DEFAULT_MODEL = "meta-llama/llama-4-maverick:free"  

MODELS = {
    "meta-llama/llama-4-maverick:free": "Llama 4 Maverick",
    "google/gemini-2.5-pro-exp-03-25:free": "Gemini 2.5 pro exp",
    "qwen/qwq-32b:free": "Qwen QwQ 32B"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —É–º–Ω—ã–π –±–æ—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π @treshdurov. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ @" + BOT_USERNAME[1:] + ", –ª–∏–±–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

async def model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=model_id)]
        for model_id, name in MODELS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:", reply_markup=reply_markup)
    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    model_id = query.data
    if model_id in MODELS:
        context.user_data["model"] = model_id  
        await query.message.chat.send_message(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {MODELS[model_id]}")
        await query.message.delete()
    else:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.message.delete()

async def query_openrouter(message: str, model: str) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ç–µ–º–µ."},
            {"role": "user", "content": message}
        ]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                logger.info(f"OpenRouter API response status: {response.status}")
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"OpenRouter API response: {result}")
                    return result["choices"][0]["message"]["content"]
                else:
                    error_text = await response.text()
                    logger.error(f"OpenRouter API error: {response.status} - {error_text}")
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {response.status} - {error_text}"
    except Exception as e:
        logger.error(f"Exception in query_openrouter: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    text = message.text

    if message.chat.type in ["group", "supergroup"]:
        if message.reply_to_message and message.reply_to_message.from_user.username == BOT_USERNAME[1:]:
            pass 
        else:
            if not text.startswith(BOT_USERNAME):
                return 
            text = text[len(BOT_USERNAME):].strip() 
    if not text:
        await message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!")
        return
    model = context.user_data.get("model", DEFAULT_MODEL)
    thinking_message = await message.reply_text("–î—É–º–∞—é...")
    response = await query_openrouter(text, model)

    try:
        await thinking_message.delete()
    except Exception as e:
        logger.error(f"Failed to delete thinking message: {str(e)}")
    await message.reply_text(response)
    
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    
    if message.chat.type not in ["group", "supergroup"]:
        await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    args = context.args
    if not args:
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    question = " ".join(args)  
    
    try:
        chat_admins = await context.bot.get_chat_administrators(message.chat.id)
        chat_members = await context.bot.get_chat_member_count(message.chat.id)
        
        if chat_members <= 1:
            await message.reply_text("–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return
        
        all_members = []
        async for member in context.bot.get_chat_members(message.chat.id):
            if not member.user.is_bot: 
                all_members.append(member.user)
        
        if not all_members:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫—Ä–æ–º–µ –±–æ—Ç–æ–≤.")
            return
        
        random_member = random.choice(all_members)
        username = random_member.username if random_member.username else random_member.first_name
        
        intro = random.choice(INTROS)
        response = f"{intro}, —á—Ç–æ @{username} {question}"
        await message.reply_text(response)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !–∫—Ç–æ: {str(e)}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("model", model))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CommandHandler("–∫—Ç–æ", who))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
