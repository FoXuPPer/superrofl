import asyncio
import os
import speedtest
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data="measure_speed")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ—Ä–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ —è –∑–∞–ø—É—â–µ–Ω. üì°\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
def run_speedtest():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Speedtest
        st = speedtest.Speedtest()
        st.get_best_server()  # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞

        # –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥
        ping = st.results.ping

        # –ò–∑–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (download) –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ú–±–∏—Ç/—Å
        download_speed = st.download() / 1_000_000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –±–∏—Ç/—Å –≤ –ú–±–∏—Ç/—Å

        # –ò–∑–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏ (upload) –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ú–±–∏—Ç/—Å
        upload_speed = st.upload() / 1_000_000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ –±–∏—Ç/—Å –≤ –ú–±–∏—Ç/—Å

        return download_speed, upload_speed, ping
    except Exception as e:
        return None, None, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "measure_speed":
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∞
        await query.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥. üìè")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
        download_speed, upload_speed, ping = run_speedtest()

        if download_speed is None or upload_speed is None:
            # –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è
            result_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ. üòî"
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_message = (
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n"
                f"–í—Ö–æ–¥—è—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {download_speed:.2f} –ú–±–∏—Ç/—Å\n"
                f"–ò—Å—Ö–æ–¥—è—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {upload_speed:.2f} –ú–±–∏—Ç/—Å\n"
                f"–ü–∏–Ω–≥: {ping:.2f} –º—Å\n\n"
                f"–≠—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ —è –∑–∞–ø—É—â–µ–Ω. "
                f"–¢–≤–æ—è —Ä–µ–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è."
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        keyboard = [[InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="measure_speed")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(result_message, reply_markup=reply_markup)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
