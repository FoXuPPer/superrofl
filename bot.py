import random
import asyncio
import os
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å (—à—É—Ç–∫–∞)", callback_data="measure_speed_joke")],
        [InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É)", callback_data="measure_speed_real")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ—Ä–∏—Ç—å —Ç–≤–æ—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞! üòÑ\n"
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –∏–∑–º–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å: –≤ –≤–∏–¥–µ —à—É—Ç–∫–∏ –∏–ª–∏ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É.",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "measure_speed_joke":
        # –ü–µ—Ä–≤–æ–∞–ø—Ä–µ–ª—å—Å–∫–∞—è —à—É—Ç–∫–∞
        await query.message.reply_text("–ò–∑–º–µ—Ä—è—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏! üì°")
        await asyncio.sleep(random.randint(10, 20))
        download_speed = random.randint(1, 1000)
        upload_speed = random.randint(1, 1000)
        ping = random.randint(0, 9999)
        result_message = (
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–º–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n"
            f"–í—Ö–æ–¥—è—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {download_speed} –ú–±–∏—Ç/—Å\n"
            f"–ò—Å—Ö–æ–¥—è—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {upload_speed} –ú–±–∏—Ç/—Å\n"
            f"–ü–∏–Ω–≥: {ping} –º—Å\n\n"
            f"–° 1 –∞–ø—Ä–µ–ª—è! üòÇ –≠—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, —à—É—Ç–∫–∞, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!"
        )
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ (—à—É—Ç–∫–∞)", callback_data="measure_speed_joke")],
            [InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É", callback_data="measure_speed_real")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(result_message, reply_markup=reply_markup)

    elif query.data == "measure_speed_real":
        # –ù–∞—Å—Ç–æ—è—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
        await query.message.reply_text(
            "–ù–∞—á–∏–Ω–∞—é –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏! üìè\n"
            "–°–Ω–∞—á–∞–ª–∞ —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ñ–∞–π–ª –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏..."
        )

        # –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ (–≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        start_time = time.time()
        ping_message = await query.message.reply_text("–ò–∑–º–µ—Ä—è—é –ø–∏–Ω–≥...")
        ping = (time.time() - start_time) * 1000  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        file_size_mb = 5  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
        file_path = "test_file.bin"
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(file_path):
            with open(file_path, "wb") as f:
                f.write(os.urandom(file_size_mb * 1024 * 1024))  # 5 –ú–ë —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        start_time = time.time()
        with open(file_path, "rb") as f:
            await query.message.reply_document(document=f, caption="–°–∫–∞—á–∞–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏.")
        context.user_data["download_start_time"] = start_time
        context.user_data["file_size_mb"] = file_size_mb

        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏
        await query.message.reply_text(
            f"–ü–∏–Ω–≥: {ping:.2f} –º—Å\n"
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–π —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç), —á—Ç–æ–±—ã –∏–∑–º–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª–∞
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "download_start_time" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏ —Ç–µ—Å—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ—Ä–∏—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É'!")
        return

    # –ò–∑–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏
    file = update.message.document
    if not file:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
        return

    start_time = time.time()
    file_size_mb = file.file_size / (1024 * 1024)  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –ú–ë
    await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Ç–≤–æ–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∑–∫–∏...")

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è
    new_file = await file.get_file()
    await new_file.download_to_drive()
    upload_time = time.time() - start_time

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–≥—Ä—É–∑–∫–∏ (upload speed)
    upload_speed = (file_size_mb * 8) / upload_time  # –ú–±–∏—Ç/—Å (1 –ú–ë = 8 –ú–±–∏—Ç)

    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ (download speed) –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ñ–∞–π–ª
    download_time = start_time - context.user_data["download_start_time"]
    download_speed = (context.user_data["file_size_mb"] * 8) / download_time  # –ú–±–∏—Ç/—Å

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_message = (
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∑–∞–º–µ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:\n\n"
        f"–í—Ö–æ–¥—è—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {download_speed:.2f} –ú–±–∏—Ç/—Å\n"
        f"–ò—Å—Ö–æ–¥—è—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {upload_speed:.2f} –ú–±–∏—Ç/—Å\n"
        f"–ü–∏–Ω–≥: {context.user_data.get('ping', 0):.2f} –º—Å\n\n"
        "–≠—Ç–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Telegram. –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π Speedtest.net!"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ (—à—É—Ç–∫–∞)", callback_data="measure_speed_joke")],
        [InlineKeyboardButton("–ò–∑–º–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ (–ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É)", callback_data="measure_speed_real")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(result_message, reply_markup=reply_markup)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
