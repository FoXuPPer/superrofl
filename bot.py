import os
import aiohttp
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

INTROS = [
    "‚òùÔ∏è –Ø —É–≤–µ—Ä–µ–Ω",
    "üî≠ –ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç",
    "ü§î –Ø –¥—É–º–∞—é",
    "üîÆ –Ø—Å–Ω–æ –≤–∏–∂—É"
]

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
BOT_USERNAME = os.getenv("BOT_USERNAME")  
DEFAULT_MODEL = "meta-llama/llama-3.1-8b-instruct:free" 

MODELS = {
    "meta-llama/llama-3.1-8b-instruct:free": "LLaMA 3.1 (—Ç—É–ø–æ–π)",
    "google/gemma-2-9b-it:free": "Gemma 2 (?)", 
    "qwen/qwen-2-72b-instruct:free": "Qwen 2 (?)",
    "meta-llama/llama-4-maverick:free": "LLaMa 4 (—É–º–Ω—ã–π)",
    "google/gemini-2.5-pro-exp-03-25:free": "Gemini 2.5 pro (—É–º–Ω—ã–π)"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —É–º–Ω—ã–π –±–æ—Ç –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π @treshdurov. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ @" + BOT_USERNAME[1:] + ", –ª–∏–±–æ –ø–µ—Ä–µ—Å–ª–∞–≤ –ª—é–±–æ–µ –º–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

async def model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(name, callback_data=model_id)]
        for model_id, name in MODELS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:", reply_markup=reply_markup)
    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    model_id = query.data
    if model_id in MODELS:
        context.user_data["model"] = model_id  
        await query.message.chat.send_message(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {MODELS[model_id]}")
        await query.message.delete()
    else:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await query.message.delete()

async def query_openrouter(message: str, model: str, context: ContextTypes.DEFAULT_TYPE) -> str:
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    
    messages = [
        {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –≤ —Ç–µ–º–µ."}
    ]
    
    if "chat_history" in context.user_data and context.user_data["chat_history"]:
        for entry in context.user_data["chat_history"]:
            messages.append({"role": "user", "content": entry["question"]})
            messages.append({"role": "assistant", "content": entry["response"]})
    
    messages.append({"role": "user", "content": message})
    
    data = {
        "model": model,
        "messages": messages
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=data) as response:
                logger.info(f"OpenRouter API response status: {response.status}")
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"OpenRouter API response: {result}")
                    if "choices" in result and result["choices"]:
                        return result["choices"][0]["message"]["content"]
                    else:
                        logger.error(f"OpenRouter API response missing 'choices': {result}")
                        return "–û—à–∏–±–∫–∞: –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /model."
                else:
                    error_text = await response.text()
                    logger.error(f"OpenRouter API error: {response.status} - {error_text}")
                    if response.status == 429:
                        return "–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é /model."
                    elif response.status == 401:
                        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞."
                    else:
                        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {response.status} - {error_text}"
    except Exception as e:
        logger.error(f"Exception in query_openrouter: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {str(e)}"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    text = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    if message.chat.type in ["group", "supergroup"]:
        if message.reply_to_message and message.reply_to_message.from_user.username == BOT_USERNAME[1:]:
            pass 
        else:
            if not text.startswith(BOT_USERNAME):
                return 
            text = text[len(BOT_USERNAME):].strip() 


    if not text:
        await message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!")
        return

    if "chat_history" not in context.user_data:
        context.user_data["chat_history"] = []
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏")

    model = context.user_data.get("model", DEFAULT_MODEL)

    thinking_message = await message.reply_text("–î—É–º–∞—é...")

    response = await query_openrouter(text, model, context)

    context.user_data["chat_history"].append({
        "question": text,
        "response": response
    })
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: –≤–æ–ø—Ä–æ—Å='{text}', –æ—Ç–≤–µ—Ç='{response}'")
    if len(context.user_data["chat_history"]) > 10:
        context.user_data["chat_history"] = context.user_data["chat_history"][-10:]

    try:
        await thinking_message.delete()
    except Exception as e:
        logger.error(f"Failed to delete thinking message: {str(e)}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.reply_text(response)
    
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ !–∫—Ç–æ/!–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∞: {message.text}")
    
    if message.chat.type not in ["group", "supergroup"]:
        await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    text = message.text
    command = "–∫—Ç–æ" if text.startswith("!–∫—Ç–æ") else "–∫–æ–≥–æ"
    command_length = len(command) + 1  
    
    if len(text) <= command_length:
        await message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    question = text[command_length:].strip() 
    
    try:
        chat_admins = await context.bot.get_chat_administrators(message.chat.id)

        all_members = [admin.user for admin in chat_admins if not admin.user.is_bot]
        logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã): {len(all_members)}")
        
        if not all_members:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã.")
            return

        if command == "–∫—Ç–æ":
            random_member = random.choice(all_members)
            
            user_id = str(random_member.id)
            if "nicknames" in context.chat_data and user_id in context.chat_data["nicknames"]:
                display_name = context.chat_data["nicknames"][user_id]
            else:
                display_name = random_member.first_name
            
            mention = f"[{display_name}](tg://user?id={random_member.id})"
            
            intro = random.choice(INTROS)
            response = f"{intro}, —á—Ç–æ {mention} {question}"
            
        else:  
            if len(all_members) < 2:
                await message.reply_text("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !–∫–æ–≥–æ.")
                return
            
            member1 = random.choice(all_members)
            all_members.remove(member1) 
            member2 = random.choice(all_members)
            
            user1_id = str(member1.id)
            user2_id = str(member2.id)
            display_name1 = context.chat_data["nicknames"][user1_id] if "nicknames" in context.chat_data and user1_id in context.chat_data["nicknames"] else member1.first_name
            display_name2 = context.chat_data["nicknames"][user2_id] if "nicknames" in context.chat_data and user2_id in context.chat_data["nicknames"] else member2.first_name
            
            mention1 = f"[{display_name1}](tg://user?id={member1.id})"
            mention2 = f"[{display_name2}](tg://user?id={member2.id})"
            
            intro = random.choice(INTROS)
            question_lower = question.lower()
            if question_lower.startswith("—è ") or question_lower.startswith("—Ç—ã "):
                action = question.split(" ", 1)[1] if " " in question else question
                response = f"{intro}, —á—Ç–æ {mention1} {action} {mention2}"
            else:
                response = f"{intro}, —á—Ç–æ {mention2} {question}"
        
        await message.reply_text(response, parse_mode="Markdown")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ !–∫—Ç–æ/!–∫–æ–≥–æ: {str(e)}")
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")

async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    
    if message.chat.type not in ["group", "supergroup"]:
        await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    text = message.text
    nickname = text[4:].strip() if len(text) > 4 else "" 
    
    user = message.from_user
    user_id = str(user.id)
    real_name = user.first_name  
    mention = f"[{real_name}](tg://user?id={user_id})"
    
    if "nicknames" not in context.chat_data:
        context.chat_data["nicknames"] = {}
    
    if not nickname:
        if user_id in context.chat_data["nicknames"] and context.chat_data["nicknames"][user_id]:
            current_nickname = context.chat_data["nicknames"][user_id]
            response = f"üóì –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention} : ¬´{current_nickname}¬ª"
        else:
            response = f"üóì –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention} –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞."
        await message.reply_text(response, parse_mode="Markdown")
        return
    
    context.chat_data["nicknames"][user_id] = nickname
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏–∫ –¥–ª—è {user_id}: {nickname}")
    
    response = f"‚úÖ –ù–∏–∫ {mention} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{nickname}¬ª"
    await message.reply_text(response, parse_mode="Markdown")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    
    if "chat_history" not in context.user_data or not context.user_data["chat_history"]:
        await message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –ø—É—Å—Ç–∞. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    history_text = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é:\n\n"
    for i, entry in enumerate(context.user_data["chat_history"], 1):
        history_text += f"{i}. **–í–æ–ø—Ä–æ—Å:** {entry['question']}\n**–û—Ç–≤–µ—Ç:** {entry['response']}\n\n"
    
    await message.reply_text(history_text, parse_mode="Markdown")

async def start_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    
    web_app = WebAppInfo(url="https://megagame-production.up.railway.app/")
    button = InlineKeyboardButton(text="–ò–≥—Ä–∞—Ç—å –≤ Agar.io", web_app=web_app)
    keyboard = InlineKeyboardMarkup([[button]])
    
    await message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å Agar.io", reply_markup=keyboard)

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("model", model))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.Regex(r'^!(–∫—Ç–æ|–∫–æ–≥–æ)\b'), who))
    app.add_handler(MessageHandler(filters.Regex(r'^!–Ω–∏–∫\b'), set_nickname))
    app.add_handler(MessageHandler(filters.Regex(r'^!–∏—Å—Ç–æ—Ä–∏—è\b'), show_history))
    app.add_handler(MessageHandler(filters.Regex(r'^!–∏–≥—Ä–∞\b'), start_game))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
